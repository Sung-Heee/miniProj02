<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.miniproj02.member.MemberMapper">

    <sql id="search">
        <where>
            <if test="searchKey != null and searchKey != ''">
                member_email like concat('%', #{searchKey}, '%')
            </if>
            <if test="searchName != null and searchName != ''">
                and member_name like concat('%', #{searchName}, '%')
            </if>
            <if test="searchPhone != null and searchPhone != ''">
                and member_phone like concat('%', #{searchPhone}, '%')
            </if>
        </where>
    </sql>

<!--    로그인 성공시 데이터 가져오기-->
    <select id="login" resultType="MemberVO">
        select
            M.*, GROUP_CONCAT(H.hobby_name SEPARATOR ', ') AS hobbyList
        FROM TB_MEMBER M
                 LEFT JOIN TB_MEMBER_HOBBY MH ON M.member_id = MH.member_id
                 LEFT JOIN TB_HOBBY H ON MH.hobby_id = H.hobby_id
        where member_email = #{member_email}
        GROUP BY M.member_id
    </select>

<!--    로그인 성공시 마지막 로그인 시간 업데이트-->
    <update id="updateMemberLastLogin">
        update tb_member
        set
            member_last_login_time = now()
        where member_email = #{member_email}
    </update>

<!--    로그인 성공시 카운트 +1 -->
<!--    만약 5번 넘어가면 계정 잠김.-->
    <update id="loginCountInc">
        update tb_member
        set
            member_login_count = member_login_count + 1
        <choose>
            <when test="member_login_count >= 2">
                , member_account_locked = 'Y'
            </when>
            <otherwise>
                , member_account_locked = 'N'
            </otherwise>
        </choose>
        where member_email = #{member_email}
    </update>

<!--    로그인 카운트 초기화-->
    <update id="loginCountClear">
        update tb_member
        set
            member_login_count = 0
            , member_account_locked = 'N'
        where member_email = #{member_email}
    </update>

<!--    회원가입-->
    <insert id="insert" keyProperty="member_id" useGeneratedKeys="true">
        INSERT INTO tb_member (
            member_email,
            member_pwd,
            member_name,
            member_nickname,
            member_address,
            member_phone,
            member_gender
        ) VALUES (
                     #{member_email},
                     #{member_pwd},
                     #{member_name},
                     #{member_nickname},
                     #{member_address},
                     #{member_phone},
                     #{member_gender}
                 )
    </insert>

    <select id="getPwd" resultType="MemberVO">
        select
            member_pwd
        from tb_member
        where member_id = #{member_id}
    </select>

    <update id="update">
        update tb_member
        set member_name = #{member_name}, member_nickname = #{member_nickname}, member_gender = #{member_gender}, member_address = #{member_address}, member_phone=#{member_phone}
        where member_id = #{member_id}
    </update>

    <delete id="withdraw">
        delete from tb_member
        where member_id = #{member_id}
    </delete>

    <select id="existUser" resultType="MemberVO">
        select *
        from tb_member
        where member_email = #{member_email}
    </select>

    <select id="existNickName" resultType="MemberVO">
        select *
        from tb_member
        where member_nickname = #{member_nickname}
    </select>

    <select id="getRole" resultType="String">
        select
            member_roles
        from tb_member
        where member_email = #{member_email}
    </select>

    <select id="getList" resultType="MemberVO">
        select
            *
        from tb_member
        <include refid="search"/>
        order by member_id limit #{skip}, #{size}
    </select>

    <select id="getTotalCount" resultType="int">
        select
            count(*)
        from tb_member
    </select>

    <update id="lock">
        update tb_member
        set member_account_locked = 'Y'
        where member_id = #{member_id}
    </update>

    <update id="unlock">
        update tb_member
        set member_account_locked = 'N'
        where member_id = #{member_id}
    </update>

    <select id="getHobby" resultType="HobbyVO">
        select
            *
        from tb_hobby
    </select>

    <insert id="insertHobby" >
        INSERT INTO tb_member_hobby (member_id, hobby_id)
        VALUES (#{member_id}, (SELECT hobby_id FROM tb_hobby WHERE hobby_name = #{hobby}))
    </insert>

    <delete id="deleteHobby">
        delete from tb_member_hobby
        where member_id = #{member_id}
    </delete>

</mapper>